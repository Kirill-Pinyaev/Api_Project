import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import random
import time, datetime
import requests
import sys


vk_session = vk_api.VkApi(
    token='dc59d33f532316392242ba355086b5c35e22623e0fdae6f433d6f17b655b10ce8e95db5790ab60344beb1')
longpoll = VkBotLongPoll(vk_session, '193318026')

flag = False
flag_play = False
id_user = None
slovarik_slov = {
    'а': ['абзац', 'абонемент', 'абонент', 'абрикос', 'абажур', 'арка', 'арфа',
          'аллергия', 'аллегория', 'автобус', 'автомобиль', 'автоответчик', 'абстракция',
          'абсурд', 'авантюрист', 'арбуз', 'аванс', 'август', 'авария', 'агент', 'агенство',
          'аэропорт', 'авиатор', 'автограф', 'агония', 'агрессия', 'адвокат', 'администратор',
          'адреналин', 'адрес', 'ажур', 'ажиотаж', 'азарт', 'азот', 'аист', 'академия',
          'аквамарин', 'аквапарк', 'акварель', 'амнезия', 'аккумулятор', 'аист',
          'аккуратность', 'аккорд', 'аккордеон', 'акрил', 'акробат', 'акт', 'акцент', 'акциз',
          'акция', 'алгебра', 'аллигатор', 'алмаз', 'алчность', 'альбом', 'альбинос',
          'альпинист', 'алюминий', 'аммиак', 'амперметр', 'амплитуда', 'ампула', 'ампутация',
          'анализ', 'аналог', 'ананас', 'анатомия', 'ангел', 'ангина', 'анестезия',
          'антибиотик', 'антилопа', 'античность', 'антоним', 'апатия', 'аппендицит',
          'аппетит', 'аппликация', 'аренда', 'аргумент', 'аристократ', 'армия', 'аромат',
          'арифметика', 'артиллерия', 'артист', 'археология', 'архитектура', 'астма',
          'астроном', 'астролог', 'асфальт', 'атлант', 'атмосфера', 'атлас', 'атлет',
          'атлетика', 'атеизм', 'атом', 'атрибут', 'аукцион', 'аферист', 'аэрозоль'],
    'б': ['бабушка', 'багаж', 'багет', 'бадминтон', 'бальзам', 'базилик', 'бактерия',
          'балкон', 'балл', 'бал', 'баланс', 'бамбук', 'банан', 'бандит', 'банк', 'банкет',
          'банкрот', 'бант', 'баня', 'барабан', 'бар', 'баран', 'барбарис', 'баржа', 'биржа',
          'барин', 'бархат', 'барьер', 'баскетбол', 'басня', 'бочка', 'башня', 'башмак',
          'баян', 'бегемот', 'бег', 'беда', 'бедность', 'белка', 'белизна', 'белуга',
          'бензин', 'безопасность', 'белье', 'бергамот', 'берег', 'береза', 'берет',
          'берлога', 'беседа', 'бетон', 'бешенство', 'биатлон', 'библия', 'библиотека',
          'бизон', 'билет', 'бинт', 'биология', 'битва', 'бицепс', 'благодарность',
          'благородие', 'бледность', 'блин', 'близнец', 'близость', 'близорукость', 'блок',
          'боб', 'бой', 'бок', 'боксёр', 'бокал', 'бокс', 'болото', 'болт', 'боль', 'борт',
          'борьба', 'боязнь', 'боярыня', 'браконьер', 'браслет', 'брат', 'бревно',
          'брезгливость', 'брелок', 'брошь', 'бриллиант', 'бритва', 'бровь', 'бродяга',
          'бром', 'бронь', 'брусника', 'будка', 'будильник', 'бузина', 'буква', 'бумага',
          'бунт', 'буран', 'буржуазия', 'бутылка', 'буфет', 'бусы', 'бык', 'былина', 'быт',
          'бюллетень', 'бюро'],
    'в': ['вагон', 'вагонетка', 'ваза', 'вазелин', 'вакуум', 'вакцина', 'валет', 'валун',
          'вальс', 'валюта', 'вампир', 'варежка', 'вата', 'ватман', 'вафля', 'ввязка',
          'вдова', 'вдох', 'вдохновение', 'вегетарианец', 'ведомость', 'ведро', 'ведущий',
          'ведьма', 'веервездеход', 'век', 'вектор', 'велосипед', 'вельможа', 'веник',
          'венок', 'вентилятор', 'вера', 'верба', 'веранда', 'верблюд', 'веревка',
          'вердикт', 'версия', 'верстак', 'вертолет', 'вершина', 'вес', 'веселье',
          'весельчак', 'весло', 'весна', 'веснушки', 'вести', 'вестибюль', 'весы', 'ветер',
          'ветеран', 'ветка', 'ветряк', 'ветчина', 'вечер', 'вечеринка', 'вечность',
          'вешалка', 'вещество', 'вещь', 'взвод', 'взгляд', 'вздох', 'взлет', 'взломщик',
          'взнос', 'взрыв', 'взрывчатка', 'взятка', 'вигвам', 'вид', 'видеозапись', 'визг',
          'визитка', 'вилка', 'винегрет', 'вино', 'вина', 'виноград', 'винт', 'вираж',
          'виртуоз', 'вирус', 'виселица', 'висок', 'витамин', 'витрина', 'вихрь', 'вишня',
          'вкус', 'влага', 'власть', 'внимание', 'внук', 'вода', 'водитель', 'водолаз'],
    'г': ['гавань', 'гадалка', 'гадость', 'газ', 'газета', 'газировка', 'газон', 'газопровод',
          'гайка', 'галактика', 'галерея', 'галоп', 'галстук', 'гамак', 'гантель', 'гараж',
          'гардероб', 'гарнизон', 'гарнир', 'гарпун', 'гастроли', 'гвардия', 'гвоздик',
          'гвоздика', 'гвоздь', 'гейзер', 'гектар', 'гелий', 'генерал', 'генератор', 'гений',
          'география', 'геометрия', 'герб', 'герой', 'гигант', 'гигиена', 'гидра', 'гиена',
          'гильдия', 'гильза', 'гимн', 'гимназия', 'гипноз', 'гипотеза', 'гиппопотам', 'гипс',
          'гиря', 'гитара', 'глава', 'глагол', 'гладиатор', 'глаз', 'глина', 'глотка',
          'глупец', 'глушитель', 'глянец', 'гнев', 'гнездо', 'гниль', 'гном', 'год', 'голова',
          'головоломка', 'голод', 'голос', 'голубика', 'голубцы', 'голубь', 'гольф', 'гора'],
    'д': ['дамба', 'дамка', 'дань', 'дар', 'дата', 'датчик', 'дача', 'дверь', 'движение',
          'двоеточие', 'двойник', 'двор', 'дворец', 'дворник', 'дворняга', 'дворянин',
          'двушка', 'дебаты', 'дебри', 'дева', 'деверь', 'девочка', 'дед', 'декорация',
          'деликатес', 'дело', 'дельфин', 'демократ', 'демон', 'деньги', 'депо', 'депрессия',
          'депутат', 'дерби', 'деревня', 'дерево', 'десант', 'десерт', 'десна', 'деталь',
          'детдом', 'детектив', 'детектор', 'дети', 'детство', 'дефис', 'джаз', 'джем',
          'джин', 'джип', 'джинсы', 'джунгли', 'дзюдо', 'диабет', 'диагноз', 'диагональ',
          'диаграмма', 'диалог', 'диаметр', 'диапазон', 'диван', 'диверсия', 'диво', 'диета'],
    'е': ['егерь', 'еда', 'единица', 'единомышленник', 'единорог', 'единство', 'еж', 'ежевика',
          'ежегодник', 'ежик', 'ежиха', 'ежонок', 'ездок', 'елка', 'ель', 'емкость', 'енот',
          'епископ', 'еретик', 'ерунда', 'ерш', 'естественник', 'ехидна', 'ехидство'],
    'ё': ['ёж', 'ёжик', 'ёлка', 'ёмкость', 'ёрш', 'ёршик'],
    'ж': ['жаба', 'жабры', 'жаворонок', 'жадина', 'жадность', 'жажда', 'жакет', 'жало',
          'жалоба', 'жалость', 'жалюзи', 'жар', 'жара', 'жаргон', 'жаркое', 'жасмин',
          'жатва', 'жвачка', 'жгут', 'жезл', 'желание', 'желатин', 'желе', 'железа', 'железо',
          'желоб', 'желток', 'желтуха', 'желудок', 'жемчуг', 'жена', 'жених', 'женщина',
          'жердочка', 'жеребец', 'жерло', 'жертва', 'жест', 'жесть', 'жетон', 'живот',
          'животное', 'жидкость', 'жижа', 'жизнь', 'жила', 'жилет', 'жилище', 'жилье', 'жир',
          'жираф', 'житель', 'жнец', 'жонглер', 'жребий', 'жук', 'журавль', 'журнал'],
    'з': ['забава', 'забастовка', 'забвение', 'забег', 'забегаловка', 'забор', 'забота',
          'завал', 'завеса', 'зависть', 'завод', 'завоз', 'завтрак', 'завуч', 'завхоз',
          'загар', 'заговор', 'загон', 'загород', 'загс', 'задание', 'задача', 'залп',
          'замазка', 'замена', 'заметка', 'замечание', 'замок', 'замш', 'замысел', 'занавес',
          'заначка', 'заноза', 'зануда', 'занятие', 'запад', 'западня', 'запал', 'запас',
          'запах', 'записка', 'заплыв', 'заповедник', 'запор', 'заправка', 'запрет', 'запрос',
          'запчасти', 'запястье', 'зараза', 'зародыш', 'зарплата', 'заря', 'зарядка', 'засада',
          'золото', 'зной', 'зеркало', 'зефир', 'зло', 'здание', 'зебра', 'зелень', 'зверь',
          'заяц', 'звезда', 'звено', 'звонок', 'звук'],
    'и': ['ива', 'иволга', 'игла', 'игра', 'игрок', 'игрушка', 'игуана', 'идеал', 'идейка',
          'идеолог', 'идея', 'идиома', 'идиот', 'идол', 'иерархия', 'изба', 'избиение',
          'избиратель', 'избрание', 'избранник', 'избыток', 'изверг', 'известие', 'известь',
          'известняк', 'извилина', 'извозчик', 'изгиб', 'изгнание', 'изгой', 'изгородь',
          'издание', 'изделие', 'изжога', 'излишек', 'изложение', 'излом', 'излучение',
          'измена', 'изморось', 'изнанка', 'изнеможение', 'износ', 'изображение',
          'изобретатель', 'изобретение', 'изоляция', 'изумруд', 'изучение', 'изъян', 'изыск',
          'изюм', 'икона', 'икра'],
    'к': ['кабина', 'каблук', 'каемка', 'кактус', 'калека', 'калибр', 'калина', 'калуга',
          'камбуз', 'камень', 'камера', 'канава', 'канкан', 'каньон', 'капель', 'капкан',
          'капрал', 'каприз', 'капрон', 'карась', 'карета', 'карлик', 'карман', 'картеж',
          'картон', 'карьер', 'кассир', 'кафель', 'качели', 'кафтан', 'кашель', 'каштан',
          'кетчуп', 'килька', 'кинжал', 'кирпич', 'кисель', 'клапан', 'клевер', 'клеймо',
          'клетка', 'клешня', 'климат', 'клинок', 'кличка', 'клубок', 'клумба', 'клюква',
          'книжка', 'кобура', 'кобыла', 'ковчег', 'коготь', 'кодекс', 'кожура', 'колено',
          'колесо', 'колпак', 'колхоз', 'колчан', 'кольцо', 'комета', 'комикс', 'компас',
          'компот', 'конвой', 'контра'],
    'л': ['лабиринт', 'лаборатория', 'лабрадор', 'лава', 'лаванда', 'лаваш', 'лавина',
          'лавка', 'лавочка', 'лаг', 'лагерь', 'лагуна', 'ладонь', 'ладушки', 'лаз',
          'лазарет', 'лазурит', 'лазурь', 'лайка', 'лак', 'лакмус', 'лакомство', 'лакрица',
          'лактоза', 'лама', 'лампа', 'ландшафт', 'ландыш', 'лапа', 'ларец', 'ларчик',
          'лебедка', 'лебедь', 'лев', 'левша', 'легенда', 'легион', 'легкие', 'легковушка',
          'легкое', 'лед', 'леденец', 'ледобур', 'ледокол', 'лезвие', 'лейка',
          'лейкопластырь', 'лейкоцит', 'лейтенант'],
    'м': ['москва', 'мавзолей', 'магазин', 'магнитофон', 'магнолия', 'майонез',
          'майор', 'макет', 'макулатура', 'макушка', 'малина', 'мало-помалу', 'мальчик',
          'маляр', 'мандарин', 'манипуляция', 'манёвр', 'маршрут', 'маскарад', 'масленица',
          'масса', 'массаж', 'массив', 'масштаб', 'матч', 'мачеха', 'машина',
          'маяк', 'мебель', 'медаль', 'медальон', 'медведь',
          'местоимение', 'месяц', 'металл', 'метаморфоза', 'метафора', 'метеоролог',
          'метрдотель', 'метро', 'метрополитен', 'механизатор', 'мечта', 'миграция',
          'микрофон', 'микроэлемент', 'миллиард', 'миллион',
          'митинг', 'мифический', 'мобилизация', 'могучий', 'можжевельник',
          'мозаика', 'молоко', 'молоток', 'момент', 'монолог', 'монтаж', 'мораль', 'морковь',
          'мороженое', 'мороз', 'морфология', 'моцион', 'мультимедиа', 'мультипликация',
          'муравей', 'мэр', 'мякоть', 'мятеж'],
    'н': ['набело', 'навеки', 'наверх', 'навечно', 'навзничь', 'навзрыд', 'наглухо', 'надвое',
          'наедине', 'назад', 'назло', 'наизнанку', 'наизусть', 'наискосок', 'наискось',
          'наитие', 'накануне', 'налево', 'намерение', 'наперебой', 'наперевес',
          'наперегонки', 'наперерез', 'наперехват', 'направление', 'направо', 'напролом',
          'нараспев', 'народ', 'нарцисс', 'наряду', 'насквозь', 'насмарку', 'наугад',
          'наудалую', 'начинающий', 'начистоту', 'небылица', 'невежа',
          'невежда', 'невтерпёж', 'негодовать', 'неделя', 'недоросль',
          'недоумевать', 'недоучка', 'ненавидеть', 'ненароком', 'неологизм',
          'неприятель', 'несовершенство', 'неуклюже', 'неуклюжий', 'нисколечко', 'ничком',
          'ничуть', 'новелла', 'носорог', 'ностальгия', 'ноябрь'],
    'о': ['оазис', 'обаяние', 'обед', 'обелиск', 'оберегать', 'обещание', 'обидеть',
          'обитатель', 'обиход', 'облако', 'обличать', 'обогащать', 'обоняние', 'оборона',
          'обособление', 'образ', 'образовать', 'объект', 'овощи', 'овощной', 'овраг',
          'овёс', 'огород', 'огурец', 'одежда', 'одиннадцать', 'однажды', 'однофамилец',
          'озираться', 'озон', 'озорник', 'оказаться', 'океан', 'оккупация', 'около',
          'октябрь', 'опера', 'оператор', 'операция', 'оппозиция', 'оппонент',
          'оптимизм', 'оптимист', 'опушка', 'оранжерея', 'оратор', 'ораторский',
          'организация', 'организм', 'орех', 'ориентация', 'ориентир',
          'орнамент', 'орфограмма', 'орфография', 'орфоэпия', 'осанка', 'осина', 'оскомина',
          'оскорбление', 'остановка', 'отвага', 'ответственность', 'отец',
          'отечество', 'отражение', 'отразить', 'отрасль', 'оттенок', 'отчасти',
          'отчество', 'отчизна', 'офицер', 'охарактеризовать', 'охранять',
          'очевидец', 'ошеломить'],
    'п': ['павильон', 'пакгауз', 'пакет', 'палеограф', 'палисадник', 'пальто', 'памятник',
          'панорама', 'пансионат', 'пантомима', 'панцирь', 'папоротник', 'параграф',
          'парашют', 'паркет', 'парламент', 'пародия', 'пароль', 'паром',
          'партер', 'пассаж', 'пассажир', 'пастбище', 'пастух', 'патриот',
          'патрон', 'патронташ', 'паук', 'паутина', 'пафос', 'педаль', 'пейзаж', 'пенал',
          'перекати-поле', 'перила', 'период', 'перископ', 'периферия', 'перпендикуляр',
          'перрон', 'персонаж', 'перспектива', 'перчатка', 'пескарь', 'песок', 'пессимизм',
          'пессимист', 'петух', 'печать', 'пианино', 'пиджак',
          'пингвин', 'питомец', 'пичужка', 'плакат', 'планетарий', 'платок',
          'платформа', 'племянникпобеда', 'побоку', 'погода',
          'погремушка', 'подавлять', 'подготовка', 'поддаваться', 'подзаголовок',
          'подобру-поздорову', 'подорожник', 'подосиновик', 'подражание', 'подчинение',
          'пожалуйста', 'показаться', 'поколение', 'покровительство', 'полемизировать',
          'полемика', 'поликлиника', 'политика', 'полицмейстер', 'помидор',
          'понапрасну', 'понаслышке', 'понедельник', 'понимание', 'понтон', 'поодиночке',
          'поражение', 'пороша', 'портрет', 'портфель',
          'порхать', 'посетитель', 'постамент', 'постановление', 'посуда', 'потом', 'потомки',
          'почтальон', 'поэзия', 'правительство', 'превосходство', 'превратить', 'предание',
          'предатель', 'предел', 'предмет', 'председатель', 'представить',
          'представление', 'предыстория', 'презентация', 'президент', 'президиум',
          'преимущество', 'прекословить', 'прекратить',
          'прекращать', 'премьера', 'пренебрегать', 'прения', 'преобразование', 'преодолеть',
          'препинание', 'преподавать', 'пререкание', 'преследовать', 'пресса', 'престиж',
          'престол', 'претвориться', 'претендент', 'претензия', 'прибор', 'привет',
          'привилегия', 'привлекать', 'привыкать', 'привязанность',
          'пригласить', 'приготовить', 'прийти', 'приказать', 'приключение',
          'приличие', 'применение', 'пример', 'приобрести',
          'приобщиться', 'приоритет', 'природа', 'природоведение', 'присутствовать', 'присяга',
          'притворство', 'причина', 'приятель', 'проблема', 'проворно', 'прогноз', 'программа',
          'прогресс', 'проект', 'прожектор', 'произведение', 'пролог',
          'прообраз', 'пропаганда', 'пропорция', 'просветительство', 'просвещение',
          'прототип', 'профессия', 'процесс', 'пудинг', 'путешественник',
          'пшеница', 'пьедестал', 'пятница'],
    'р': ['россия', 'работа', 'равелин', 'равнина', 'радио', 'разворачиваться', 'район',
          'ракета', 'рапорт', 'рассказ', 'расстаться', 'расстояние', 'рассчитывать',
          'растение', 'расчёт', 'расщелина', 'рафинад', 'реакция', 'ребята',
          'реванш', 'революция', 'регулировать', 'редакция', 'режиссёр', 'резервы',
          'резиденция', 'резолюция', 'результат', 'рекомендация', 'рекорд', 'религия',
          'реликвия', 'ремарка', 'ремень', 'ремонт', 'репертуар', 'репетиция', 'репродукция',
          'репутация', 'республика', 'рессора', 'реставрация', 'ресурсы', 'реферат',
          'референдум', 'реформа', 'рецензия', 'решебник', 'рисунок',
          'риторика', 'ровесник', 'родина', 'роман', 'ромашка', 'русский', 'рюкзак', 'рябина'],
    'с': ['саванна', 'салазки', 'салат', 'салфетка', 'салют', 'самолёт', 'санаторий',
          'сандалия', 'сапоги', 'сарафан', 'сатира', 'сахар', 'сбережение', 'сбоку',
          'сверкать', 'сверстник', 'светлячки', 'светофор', 'свидетель',
          'свобода', 'священник', 'сгиб', 'сеанс', 'север', 'сегодня', 'сезон',
          'сейчас', 'секрет', 'секретарь', 'секунда', 'селение', 'сельдерей', 'семантика',
          'семафор', 'семена', 'семинар', 'сенсация', 'сентябрь',
          'сессия', 'сеялка', 'сигнал', 'силуэт', 'символ', 'симметрия',
          'симпатия', 'симпозиум', 'симфония', 'синица', 'сирень', 'систематически',
          'ситуация', 'скамейка', 'сканер', 'скорпион', 'слева', 'слышать', 'снаряд',
          'снегирь', 'собака', 'современник',
          'сожжёт', 'сократить', 'сокровищница', 'солдат', 'солидарность',
          'соловей', 'солома', 'соотечественник', 'соревноваться', 'сорока', 'сосредоточение',
          'состязание', 'сосулька', 'сохранять', 'сочинение', 'спартакиада',
          'спасибо', 'спектакль', 'специальность', 'спортсмен', 'справа',
          'спроста', 'спрягать', 'спряжение', 'стадион',
          'стакан', 'старатель', 'стеречь', 'стипендия', 'стихотворение',
          'столица', 'стратегия', 'стрекоза', 'стремиться', 'суббота', 'сувенир',
          'схоластика', 'сэкономить'],
    'т': ['тайм-аут', 'такелаж', 'талант', 'тамада', 'танцор', 'тарелка', 'театр', 'тезисы',
          'телевизор', 'телеграмма', 'телетайп', 'телефон', 'темперамент', 'температура',
          'тенденция', 'теперь', 'тепловоз', 'террариум', 'терраса', 'территория', 'терроризм',
          'тетрадь', 'типография', 'тираж', 'товарищ', 'тонна', 'топор', 'торжество',
          'торопиться', 'тотчас', 'трагедия', 'традиция', 'трактор', 'трамвай', 'транскрипция',
          'транслировать', 'транспарант', 'транспорт', 'трасса', 'тревога', 'тренер',
          'тренироваться', 'трибуна', 'троллейбус', 'трясина', 'тушь',
          'тушёнка'],
    'у': ['убеждение', 'увещевать', 'увидеть', 'удалить',
          'уединение', 'ужин', 'улица', 'универмаг', 'университет',
          'упорядочить', 'упражнение', 'ураган', 'урожай', 'участник',
          'ученик', 'учитель', 'учреждение'],
    'ф': ['факультет', 'фамилия', 'фантазия', 'фантастика', 'фарфор', 'фасад', 'фасоль',
          'фаэтон', 'фаянс', 'февраль', 'фейерверк', 'фельдъегерь', 'фельетон', 'фестиваль',
          'фиаско', 'фигура', 'физиономия', 'филология', 'философия', 'фильмотека', 'финиш',
          'фойе', 'фольга', 'фонарщик', 'фонарь', 'фонтан', 'фотоаппарат',
          'фразеологизм', 'фронтон', 'футбол'],
    'х': ['харитонов', 'халат', 'характер', 'хлеб-соль', 'хлебороб', 'хлестать', 'хозяйство',
          'хоккей', 'хорошо', 'худо-бедно', 'хабар', 'халва', 'халтура', 'хам', 'хамелеон',
          'хаос', 'характер', 'хват', 'хворост', 'хвост', 'хвоя', 'химия'],
    'ц': ['целина', 'целлофан', 'целлюлоза', 'цемент', 'ценность', 'центнер', 'цивилизация',
          'циклон', 'цилиндр', 'циновка', 'цирюльник', 'цитата', 'циферблат', 'цыган',
          'цыкать', 'цып-цып', 'цыпки', 'цыплёнок', 'цыц'],
    'ч': ['часовня', 'человечество', 'чемпион', 'чествовать', 'четверг',
          'четыреста', 'чехол', 'чешуя', 'чувствовать'],
    'ш': ['шотландия', 'шаблон', 'шампиньон', 'шампунь', 'шарада', 'шасси', 'шевелить',
          'шеренга', 'шествовать', 'шестнадцать', 'шиповник', 'шов', 'шоколад', 'шорох',
          'шоссе', 'шофёр', 'шпаргалка', 'шпион', 'штукатур'],
    'щ': ['щедроты', 'щеколда', 'щавель', 'щебенка', 'щегол', 'щедрость', 'щека', 'щелочка',
          'щель', 'щенок', 'щепка', 'щетина', 'щетка', 'щипцы', 'щит', 'щука'],
    'э': ['эвкалипт', 'эволюция', 'эвфемизм', 'эгоизм', 'эквивалент', 'экзамен', 'экземпляр',
          'экипаж', 'экология', 'экономист', 'экскаватор', 'экскурсия', 'экспедиция',
          'эксперимент', 'экспресс', 'экспрессия', 'электрификация', 'электричество',
          'электровоз', 'электростанция', 'эликсир', 'эмблема', 'эмиграция', 'энергия',
          'эпиграмма', 'эпилог', 'эскалатор', 'эскимо', 'эстетический', 'этикет',
          'этимология', 'эффект'],
    'ю': ['юмор', 'юннат', 'юноша', 'юбилей', 'юбка', 'ювелир', 'юг', 'юла', 'юмор',
          'юнга', 'юнец', 'юпитер', 'юрист'],
    'я': ['яблоко', 'ягода', 'язык', 'январь', 'ящерица', 'ябеда', 'ягненок',
          'ягуар', 'яд', 'ядро', 'язва', 'яйцо', 'якорь', 'яма', 'янтарь', 'японец', 'ярость',
          'ярус', 'ясли', 'ястреб']
    }
attachement_ph_d = {'hi': ['video-193318026_456239019', 'video-193318026_456239021',
                           'video-193318026_456239024', 'video-193318026_456239033',
                           'video-193318026_456239035', 'video-193318026_456239036'],
                    'city': [ 'video-193318026_456239030', 'video-193318026_456239022'],
                    'weather': ['video-193318026_456239046', 'video-193318026_456239047',
                                'video-193318026_456239048'],
                    'choice': ['video-193318026_456239025', 'video-193318026_456239026'],
                    'r-p-s': ['video-193318026_456239023', ''],
                    'win': ['video-193318026_456239028', 'video-193318026_456239029'],
                    'fail': ['video-193318026_456239042', 'video-193318026_456239043',
                             ],
                    'sad': ['video-193318026_456239045'],
                    'time': ['video-193318026_456239031', 'video-193318026_456239032',
                             'video-193318026_456239044'],
                    'words': ['video-193318026_456239049', 'video-193318026_456239050'],
                    'number': ['video-193318026_456239034', 'video-193318026_456239037']}


def main(not_first=False, vk=None, event=None):
    global flag, flag_play, id_user, attachement_ph_d
    if not_first:
        vk.messages.send(user_id=id_user,
                         message="Вот что я могу:\n"
                                 "Игры\n"
                                 "Кое-что полезное\n" 
                                 "Погода",
                         attachment=random.choice(attachement_ph_d['hi']),
                         random_id=random.randint(0, 2 ** 64))
        flag_play = False
        flag = True
        game_flag = False   # выбран навык "числа"
        number_game = False   # выбрана числовая игра
        useful_flag = False   # выбран навык "помочь принять решение"
        form_procc = True   # идет формирование списка предлагаеных вариантов

        weather_fl = False   # выбран навык "погода"
        city_fl_pr = False   # идет поиск города
        w_weather = False  # выбраны "данные о погоде"
        w_time = False  # выбраны "данные о времени"
        this_moment = False  # выбрана погода на "данный момент"
        certain_time = False  # выбрана погода на "определенное время"

    for event in longpoll.listen():
        vk = vk_session.get_api()
        # if event.obj.message['from_id'] not in id_d.keys():
        #     id_d[event.obj.message['from_id']] = []
        #     print(event.obj.message['from_id'])


        if event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'].lower() == 'начать' and not flag:
            id_user = event.obj.message['from_id']
            flag = True

            help_1 = True

            print(event)
            print('Новое сообщение:')
            print('Для меня от:', event.obj.message['from_id'])
            print('Текст:', event.obj.message['text'])
            vk.messages.send(user_id=event.obj.message['from_id'],
                             message="Привет я бот(название бота)\n"
                                     "и вот что я могу:\n"
                                     "Игры\n"
                                     "Погода\n"
                                     "Помочь принять решение",
                             attachment=random.choice(attachment_ph_d['hi']),
                             keyboard=open('keyboard_menu.json', 'r', encoding='UTF-8').read(),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and 'игр' in \
                event.obj.message['text'].lower() and flag:
            flag_play = True
            number_game = False
            numb_gm_ii, numb_gm_polz = False, False

            help_1 = False
            help_2 = True

            vk.messages.send(user_id=event.obj.message['from_id'],
                             message="Можем поиграть в:\n"
                                     "Камень-ножницы-бумага(1)\n"
                                     "Угадай число(2)\n"
                                     "Слова(3)\n"
                                     "Чтобы выбрать, напиши цифру в скобках",
                             attachment=random.choice(attachment_ph_d['game']),
                             keyboard=open('keyboard_play.json', 'r',
                                           encoding='UTF-8').read(),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'] == '1' and flag and flag_play and not(number_game or rps_game or words_game):
            rps_game = True

            help_2 = False
            vk.messages.send(user_id=id_user,
                             message="Название: Камень-ножницы-бумага"
                                     "Сейчас пойдет отсчет до 5 и на цифре пять " 
                                     "Вам нужно отправить:"
                                     "КАМЕНЬ, НОЖНИЦЫ или БУМАГА\n"
                                     "Памятка:\n"
                                     "Бумага бьёт камень, но боится ножниц.\n"
                                     "Камень бьёт ножницы, но боится бумагу.\n"
                                     "Ножницы бьют бумагу, но боятся камня.\n"
                                     "Для продолжения напишите ДА\n"
                                     "Если не хотите играть - НЕТ",
                             attachment=random.choice(attachment_ph_d['r-p-s']),
                             keyboard=open('keyboard_y_n.json', 'r', encoding='UTF-8').read(),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and flag_play \
                and rps_game and not(number_game and words_game):
            if event.obj.message['text'].lower() == 'да':
                rock_paper_scissors(vk, event)
            elif event.obj.message['text'].lower() == 'нет':
                main(True, vk)
            else:
                text = "Для продолжения напишите ДА\n" \
                       "Если не хотите играть - НЕТ"
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 keyboard=open('keyboard_y_n.json', 'r',
                                               encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'] == '3' and flag and flag_play and not(number_game or rps_game or words_game):
            words_game = True

            help_2 = False
            vk.messages.send(user_id=id_user,
                             message="Название: Игра в слова\n"
                                     "Правила очень просты! Вы называете любое слово,\n"
                                     "а я называю слово, первая буква которого совпадает с"
                                     " последней буквой Вашего слова.\n"
                                     "Если названо слово, заканчивающееся на Й, Ы, Ъ, Ь,\n"
                                     " следующему игроку нужно придумать слово на предпоследню"
                                     " букву.\n"
                                     "Слова в процессе однного кона игры не должны повторяться.\n"
                                     "Нельзя использовать имена прилагательные и имена собственные.\n"   
                                     "Для продолжения напишите ДА\n"
                                     "Если не хотите играть - НЕТ\n"
                                     "Если во время игры Вы не знаете слово"
                                     " или надоело играть - напишите СДАЮСЬ",
                             attachment=random.choice(attachment_ph_d['words']),
                             keyboard=open('keyboard_y_n.json', 'r', encoding='UTF-8').read(),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and flag_play \
                and words_game and not (number_game and rps_game):
            if event.type == VkBotEventType.MESSAGE_NEW and \
                    event.obj.message['text'].lower() == 'да':
                slova(vk)
            elif event.type == VkBotEventType.MESSAGE_NEW and \
                    event.obj.message['text'].lower() == 'нет':
                main(True, vk)
            else:
                text = "Для продолжения напишите ДА\n" \
                       "Если не хотите играть - НЕТ"
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 keyboard=open('keyboard_y_n.json', 'r',
                                               encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'] == '2' and flag and flag_play and not(number_game or rps_game or words_game):
            number_game = True

            help_2 = False
            help_4 = True
            vk.messages.send(user_id=event.obj.message['from_id'],
                             message="Название: Угадай число\n"
                                     "Один из нас - Я или ВЫ - загадывает число от 1 до 999.\n"
                                     "Другой начинает угадывать, называя числа, "
                                     "получая в ответ фразы 'больше' или 'меньше'.\n"
                                     "'Меньше' - загаданное число меньше Вашего.\n"
                                     "'Больше' - загаданное число больше Вашего.\n"
                                     "Напишите СТОП - если хотите завершить игру\n"
                                     "Кто загадывает число: Я или ВЫ?",
                             attachment=random.choice(attachment_ph_d['number']),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and \
                ((event.obj.message['text'].lower() == 'я' and flag and number_game) or \
                 (event.obj.message['text'].lower() in ["перезапустить", "не перезапускать"]
                  and flag and number_game and numb_gm_polz) or
                 (event.obj.message['text'].lower() == "стоп" and flag and number_game)):
            help_4 = False
            help_7 = False

            numb_gm_polz = True
            numb_gm_p_cl = NumberGamePolz(number_game, numb_gm_polz, True)

            if event.obj.message['text'].lower() in ["не перезапускать", "стоп"]:
                number_game, numb_gm_polz = False, False
                help_1 = True
                main(True, vk)
            else:
                text = "Хорошо. Загадывайте число.\n" \
                       "Загадали? ДА / НЕТ"

                help_5 = True

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 keyboard=open('keyboard_y_n.json', 'r', encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'].lower() in ['нет', 'да'] and flag and number_game and numb_gm_polz:
            if event.obj.message['text'].lower() == 'нет':

                text = "Ладно, я могу подождать.\n" \
                       "А теперь загадали? ДА / НЕТ"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['wait']),
                                 keyboard=open('keyboard_y_n.json', 'r', encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))

            else:
                help_5 = False
                help_6 = True

                text = "Хорошо. Начинаю угадывать\n"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=numb_gm_p_cl.number_game_st(),
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'].lower() in ['больше', 'меньше', 'равно'] and flag \
                and number_game and numb_gm_polz:
            if numb_gm_p_cl.minim < numb_gm_p_cl.maxim - 1:

                help_6, help_7, text = numb_gm_p_cl.numb_game_plz_func \
                    (event.obj.message['text'].lower())

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            else:
                text = "Должно быть, Вы ошиблись.\n" \
                       "Такого числа нет в диапазоне от 1 до 1000"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['fail']),
                                 random_id=random.randint(0, 2 ** 64))
        elif event.type == VkBotEventType.MESSAGE_NEW and \
                ((event.obj.message[
                      'text'].lower() == 'вы' and flag and number_game) or \
                 (event.obj.message['text'].lower() in ["перезапустить",
                                                        "не перезапускать", "стоп"]
                  and flag and number_game and numb_gm_ii) or
                 (event.obj.message['text'].lower() == "стоп" and flag and number_game)):
            help_4 = False
            help_7 = False

            numb_gm_ii = True
            find_highest = False

            numb_gm_ii_cl = NumberGameII(number_game, numb_gm_ii, find_highest, False)

            if event.obj.message['text'].lower() in ["не перезапускать", "стоп"]:
                number_game, numb_gm_ii, find_highest = False, False, False
                help_1 = True
                main(True, vk)
            else:
                help_8 = True
                text = "Введите максимальное число, которое мне можно загадать\n" \
                       "Минимальное число - 0"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'].isdigit() and flag and number_game and numb_gm_ii:
            help_8 = False

            if not find_highest:
                number_game, numb_gm_polz, find_highest, help_9, text = numb_gm_ii_cl. \
                    highest(event.obj.message['text'].lower())
                print(number_game)
                print(numb_gm_polz)
                print(find_highest)
                print(text)

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            else:

                text, help_9, help_7 = numb_gm_ii_cl.numb_game_ii_func(event.obj.message['text'].lower())

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and 'решение' in event.obj.message[
            'text'].lower() and flag and form_procc and not(number_game and words_game and rps_game):

            help_1 = False
            help_3 = True

            decision = True
            form_procc = True
            kit = []

            vk.messages.send(user_id=event.obj.message['from_id'],
                             message="Я могу Вам помочь выбрать что-то "
                                     "из определённой последовательнсти "
                                     "предметов, которую Вы назовёте.\n"
                                     "Нужна такая помощь? ДА / НЕТ\n"
                                     "Напишите СТОП - если хотите завершить навык\n",
                             # attachment=random.choice(attachment_ph_d['choice']),
                             keyboard=open('keyboard_y_n.json', 'r', encoding='UTF-8').read(),
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and \
                ((event.obj.message['text'].lower() in [
                    'нет', 'да', "перезапустить", "не перезапускать", "стоп"]
                  and flag and decision and form_procc) or
                 (event.obj.message['text'].lower() == "стоп" and flag and
                  decision and not form_procc)):
            help_3 = False
            if event.obj.message['text'].lower() in ['нет', "не перезапускать", "стоп"]:

                text = "Ладно...А я ведь просто хотел помочь."

                decision = False
                form_procc = True
                help_1 = True
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['sad']),
                                 random_id=random.randint(0, 2 ** 64))

                main(True, vk)

            else:
                form_procc = False
                kit = []
                text = f"Ура, ура, ура! Я с радостью Вам помогу.\n" \
                       "Отдельными сообщениями введите все элементы последовательности, из которой" \
                       "мне нужно будет выбрать.\n" \
                       "В конце введите слово - ВЫБИРАЙ"
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['choice']),
                                 random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and flag \
                and decision and not form_procc and event.obj.message[
            'text'].lower() == "выбирай":
            form_procc = True

            vk.messages.send(user_id=event.obj.message['from_id'],
                             message=f"Думаю, что {random.choice(kit)} - "
                                     "идеальный вариант!\n"
                                     "Напишите мне -  ПЕРЕЗАПУСТИТЬ навык / НЕ ПЕРЕЗАПУСКАТЬ",
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and flag and decision and not form_procc:
            print(event.obj.message['text'].lower())

            kit.append(event.obj.message['text'])
            print(kit)

        elif event.type == VkBotEventType.MESSAGE_NEW and not decision and \
                (('погод' in event.obj.message['text'].lower() and flag and not weather_fl)
                 or (event.obj.message['text'].lower() and flag and weather_fl and city_fl_pr)
                 or (event.obj.message['text'].lower() == 'стоп' and flag and weather_fl)):

            help_1 = False

            if not weather_fl:
                weather_fl = True

                # weather_cl = Weather(city_fl)
                city_fl_pr = True

                text = "С радостью Вам помогу! Назовите название города, данные " \
                       "для которого Вы хотели бы получить.\n" \
                       "Для выхода напишите СТОП"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['planet']),
                                 random_id=random.randint(0, 2 ** 64))

            elif event.obj.message['text'].lower() == "стоп":
                weather_fl = False
                city_fl_pr = False
                w_weather = False
                w_time = False
                help_1 = True

                text = "Ладно...А я ведь просто хотел помочь."

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['sad']),
                                 random_id=random.randint(0, 2 ** 64))
                main(True, vk)
            else:
                if city_fl_pr:
                    city = event.obj.message['text'].lower()

                    city_cl = Cities(city)

                    if len(city_cl.search(city)) == 3:

                        long, latt, city = city_cl.search(city)
                        city_fl_pr = False

                        text = f"Вы хотите получить данные о городе {city}?\n"\
                            "ДА или НЕТ\n"

                        vk.messages.send(user_id=event.obj.message['from_id'],
                                         message=text,
                                         attachment=random.choice(attachment_ph_d['city']),
                                         random_id=random.randint(0, 2 ** 64))
                    else:
                        text = city_cl.search(city)

                        vk.messages.send(user_id=event.obj.message['from_id'],
                                         message=text,
                                         random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message[
            'text'].lower()in ['да', 'нет'] and flag and weather_fl and not city_fl_pr:

            if event.obj.message['text'].lower() == 'да':
                city_fl_pr = False

                text = f"Какие данные Вы бы хотели получить для города {city}?\n" \
                    "Данные о погоде(1)\n" \
                    "Данные о времени(2)\n"
            else:
                city_fl_pr = True
                text = "Повторите ввод названия города"

            vk.messages.send(user_id=event.obj.message['from_id'],
                             message=text,
                             random_id=random.randint(0, 2 ** 64))

        elif event.type == VkBotEventType.MESSAGE_NEW and event.obj.message['text']\
                in ['1', '2'] and flag and weather_fl and not city_fl_pr and not w_weather and not w_time:
            if event.obj.message['text'] == "1":
                w_weather = True

                text = "Прогноз погоды на:\n" \
                       "Данный момент (1)\n" \
                       "Определенное время (2)\n"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 attachment=random.choice(attachment_ph_d['weather']),
                                 random_id=random.randint(0, 2 ** 64))
            else:
                w_time = True

                weather_cl = Weather(city, False, latt, long, w_weather)
                text = weather_cl.response_d('')
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
                main(True, vk)

        elif event.type == VkBotEventType.MESSAGE_NEW and ((event.obj.message[
            'text'] in ['1', '2'] and flag and weather_fl and not city_fl_pr and \
                w_weather and not w_time and not this_moment and not certain_time) or (event.obj.message[
            'text'] in ['1', '2', '3', '4'] and flag and weather_fl and not city_fl_pr and \
                w_weather and not w_time and (this_moment or certain_time))):

            if event.obj.message['text'] == '1' and not certain_time:
                if not this_moment:
                    this_moment = True
                else:
                    weather_cl = Weather(city, this_moment, latt, long, w_weather)

                    text = weather_cl.response_d('')

                    vk.messages.send(user_id=event.obj.message['from_id'],
                                     message=text,
                                     attachment=random.choice(attachment_ph_d['weather']),
                                     random_id=random.randint(0, 2 ** 64))
                    main(True, vk)
            if (event.obj.message['text'] == '2') or (certain_time and event.obj
                    .message['text'] in ['1', '2', '3', '4']):
                if not certain_time:
                    this_moment = False
                    certain_time = True

                    weather_cl = Weather(city, this_moment, latt, long, w_weather)

                    text = weather_cl.response_d('')

                    vk.messages.send(user_id=event.obj.message['from_id'],
                                     message=text,
                                     attachment=random.choice(attachment_ph_d['weather']),
                                     random_id=random.randint(0, 2 ** 64))
                else:
                    weather_cl = Weather(city, this_moment, latt, long, w_weather)

                    text_1, text_2 = weather_cl.response_d(event.obj.message['text'])
                    print(weather_cl.response_d(event.obj.message['text']))

                    vk.messages.send(user_id=event.obj.message['from_id'],
                                     message=text_1,
                                     random_id=random.randint(0, 2 ** 64))
                    vk.messages.send(user_id=event.obj.message['from_id'],
                                     message=text_2,
                                     random_id=random.randint(0, 2 ** 64))
                    main(True, vk)

        elif event.type == VkBotEventType.MESSAGE_NEW and not flag:
            vk.messages.send(user_id=event.obj.message['from_id'],
                             message="Для начала работы напишите 'Начать'",
                             random_id=random.randint(0, 2 ** 64))

        else:
            if help_1 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Выберите один из навыков:\n" \
                       "Игры\n"\
                       "Погода\n"\
                       "Помочь принять решение",
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 # attachment=random.choice(
                                 #     attachment_ph_d['game']),
                                 keyboard=open('keyboard_play.json', 'r',
                                               encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))
            elif help_2 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Выберите игру:\n" \
                       "Камень-ножницы-бумага(1)\n"\
                       "Угадай число(2)\n"\
                       "Слова(3)\n"\
                       "Чтобы выбрать, напиши цифру в скобках"
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 keyboard=open('keyboard_play.json', 'r',
                                               encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))
            elif help_3 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Вам нужна помощь с принятием решения?\n" \
                       "Напишите ДА / НЕТ\n" \
                       "Напишите СТОП - если хотите завершить навык\n"
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 keyboard=open('keyboard_y_n.json', 'r',
                                               encoding='UTF-8').read(),
                                 random_id=random.randint(0, 2 ** 64))
            elif help_4 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Выберите, кто загадывает число: Я или ВЫ?\n"\
                       "Напишите СТОП - если хотите завершить игру\n"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            elif help_5 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Вы загадали число? ДА / НЕТ"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            elif help_6 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Введите БОЛЬШЕ, МЕНЬШЕ или РАВНО"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            elif help_7 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Напишите мне -  ПЕРЕЗАПУСТИТЬ игру / НЕ ПЕРЕЗАПУСКАТЬ"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            elif help_8 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Введите максимальное число, которое мне можно загадать\n" \
                       "Минимальное число - 0"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))
            elif help_9 and event.type == VkBotEventType.MESSAGE_NEW:
                text = "Введите число, которое думаете, я загадал\n"

                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message=text,
                                 random_id=random.randint(0, 2 ** 64))


class NumberGamePolz:
    def __init__(self, nb_gm_fl, nb_gm_plz, h_6):
        self.maxim = 1000
        self.minim = 0

        self.number_game_fl = nb_gm_fl
        self.number_game_plz = nb_gm_plz
        self.help6 = h_6

        self.middle = (self.minim + self.maxim) // 2
        self.numbers = [i for i in range(1000)]

    def numb_game_plz_func(self, answ):
        if answ == "меньше" or answ == "больше":
            if answ == "меньше":
                self.minim = self.middle

            else:
                self.maxim = self.middle

            self.middle = (self.minim + self.maxim) // 2

            if self.minim < self.maxim - 1:
                self.help6 = True
                return self.help6, False, \
                       f"Число {self.numbers[self.middle]} БОЛЬШЕ, МЕНЬШЕ " \
                       f"или РАВНО вашему числу?"
            else:
                self.help6 = False
                return self.help6, True, \
                       "Должно быть, Вы ошиблись. Такого числа нет в " \
                       "диапазоне от 1 до 1000\n" \
                       "Напишите мне -  ПЕРЕЗАПУСТИТЬ игру / НЕ ПЕРЕЗАПУСКАТЬ"

        elif answ == "равно":
            self.help6 = False
            return self.help6, True, \
                   f"Ура! У меня получилось !\n " \
                   f"Ваше число : {self.numbers[self.middle]}\n" \
                   "Напишите мне -  ПЕРЕЗАПУСТИТЬ игру / НЕ ПЕРЕЗАПУСКАТЬ"
        self.help6 = False
        return self.help6, True, \
               "Должно быть, Вы ошиблись. Такого числа нет в " \
               "диапазоне от 1 до 1000\n" \
               "Напишите мне -  ПЕРЕЗАПУСТИТЬ игру / НЕ ПЕРЕЗАПУСКАТЬ"

    def number_game_st(self):
        return f"Число {self.numbers[self.middle]} БОЛЬШЕ, МЕНЬШЕ " \
               f"или РАВНО вашему числу?"


class NumberGameII:
    def __init__(self, nb_gm_fl, find_h, nb_gm_ii, h_9):
        self.numb_ii = 0

        self.find_h = find_h
        self.high = 0
        self.number_game_fl = nb_gm_fl
        self.number_game_ii = nb_gm_ii
        self.help9 = h_9
        self.help7 = False

    def highest(self, answ):
        print(f"do {answ}")
        self.high = int(answ)
        self.numb_ii = random.randint(0, int(int(answ)))
        print(self.numb_ii)
        text = "Всё, я загадал число\n" \
               "Можете угадывать"
        self.find_h = True
        self.help9 = True
        return self.number_game_fl, self.number_game_ii, self.find_h, self.help9, text

    def numb_game_ii_func(self, answ):
        print(int(answ))
        if int(answ) <= self.high and int(answ) >= 0:
            if int(answ) > self.numb_ii:
                text = "Не угадали. Мое число меньше."
                self.help9 = True
                self.help7 = False
            elif int(answ) < self.numb_ii:
                text = "Не угадали. Мое число больше."
                self.help9 = True
                self.help7 = False
            else:
                text = f"Ура ! Вы угадали, мое число {self.numb_ii}.\n" \
                       "Напишите мне -  ПЕРЕЗАПУСТИТЬ игру / НЕ ПЕРЕЗАПУСКАТЬ"
                self.help9 = False
                self.help7 = True

        else:
            text = "Точно нет...Вы сами себе противоречите...\n" \
                   f"Загадано число от 0 до {self.high}"
            self.help9 = False
            self.help7 = True
        return text, self.help9, self.help7


def restart_game(vk, game_name):
    vk.messages.send(user_id=id_user,
                     message="Еще раз?",
                     random_id=random.randint(0, 2 ** 64))
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW and \
                event.obj.message['text'].lower() == 'да':
            game_name(vk, event)
        elif event.type == VkBotEventType.MESSAGE_NEW and \
                event.obj.message['text'].lower() != 'да':
            main(True, vk)


def letters_slova(word, proverka=False):
    if proverka:
        return word[0]
    else:
        if word[-2:] == 'ая' or word[-2:] == 'ый' or word[-2:] == 'ые' or not word.isalpha():
            return '0'
        elif word[-1] == 'й' or word[-1] == 'ы' or word[-1] == 'ъ' or word[-1] == 'ь':
            return word[-2]
        return word[-1]


def rock_paper_scissors(vk, event):
    sp = ['ножницы', 'камень', 'бумага']
    for i in range(1, 6):
        vk.messages.send(user_id=id_user,
                         message=f"{i}",
                         random_id=random.randint(0, 2 ** 64))
        time.sleep(1)
    slov = sp[random.randint(0, 2)]
    vk.messages.send(user_id=id_user,
                     message=slov,
                     random_id=random.randint(0, 2 ** 64))
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            if event.obj.message['text'].lower() == slov:
                vk.messages.send(user_id=id_user,
                                 message="Ничья\n",
                                 random_id=random.randint(0, 2 ** 64))
                restart_game(vk, rock_paper_scissors)
            elif (event.obj.message['text'].lower() == 'ножницы' and slov == 'бумага') or (
                    event.obj.message['text'].lower() == 'камень' and slov == 'ножницы') or (
                    event.obj.message['text'].lower() == 'бумага' and slov == 'камень'):
                vk.messages.send(user_id=id_user,
                                 message="Вы выиграли\n",
                                 random_id=random.randint(0, 2 ** 64))
                restart_game(vk, rock_paper_scissors)
            elif (event.obj.message['text'].lower() == 'бумага' and slov == 'ножницы') or (
                    event.obj.message['text'].lower() == 'ножницы' and slov == 'камень') or (
                    event.obj.message['text'].lower() == 'камень' and slov == 'бумага'):
                vk.messages.send(user_id=id_user,
                                 message="Вы проиграли\n",
                                 random_id=random.randint(0, 2 ** 64))
                restart_game(vk, rock_paper_scissors)
            vk.messages.send(user_id=id_user,
                             message="Такого знака нет",
                             random_id=random.randint(0, 2 ** 64))
            restart_game(vk, rock_paper_scissors)


def slova(vk):
    slova_flag = False
    slova_flag1 = True
    sp_slov_user = []
    slovarik_slov_copy = slovarik_slov.copy()
    vk.messages.send(user_id=id_user,
                     message='Вы начинайте',
                     random_id=random.randint(0, 2 ** 64))
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            if event.obj.message['text'].lower() == 'сдаюсь':
                vk.messages.send(user_id=id_user,
                                 message="Ура, Ура, Ура, я выиграл",
                                 random_id=random.randint(0, 2 ** 64))
                main(True, vk)
            else:
                if slova_flag:
                    if letters_slova(i) != letters_slova(event.obj.message['text'].lower(), True):
                        vk.messages.send(user_id=id_user,
                                         message="Слово не подходит",
                                         random_id=random.randint(0, 2 ** 64))
                        slova_flag1 = False
                    else:
                        slova_flag1 = True
                if slova_flag1:
                    letter = letters_slova(event.obj.message['text'].lower())
                    if letter == '0' or event.obj.message['text'].lower() in sp_slov_user:
                        vk.messages.send(user_id=id_user,
                                         message="Слово не подходит",
                                         random_id=random.randint(0, 2 ** 64))
                    else:
                        sp_slov_user.append(event.obj.message['text'].lower())
                        if len(slovarik_slov_copy[letter]) == 0:
                            vk.messages.send(user_id=id_user,
                                             message="Я сдаюсь, вы выиграли",
                                             random_id=random.randint(0, 2 ** 64))
                            main(True, vk)
                        index = random.randint(0, len(slovarik_slov_copy[letter]) - 1)
                        sl = slovarik_slov_copy[letter][index]
                        i = slovarik_slov_copy[letter].pop(index)
                        vk.messages.send(user_id=id_user,
                                         message=f"{sl}\n"
                                                 f"Вам на букву {letters_slova(sl)}",
                                         random_id=random.randint(0, 2 ** 64))
                        slova_flag = True


class Weather:
    def __init__(self, city, now, lat, lon, w_w_fl):
        self.time = now
        self.city_fl = city
        self.lat = lat
        self.lon = lon
        self.w = w_w_fl

        self.fact_d = {"temp": ['🌡', '℃'],
                       "condition": '',
                       "wind_speed": '📈',
                       "wind_dir": '🧭',
                       "pressure_mm": '💥',
                       "humidity": '💦'}
        self.condition_d = {"clear": ["ясно", '☀'],
                       "partly-cloudy": ["малооблачно", '🌤'],
                       "cloudy": ["облачно с прояснениями", '⛅'],
                       "overcast": ["пасмурно", '🌫️'],
                       "partly-cloudy-and-light-rain": ["небольшой дождь", '🌦'],
                       "cloudy-and-light-rain": ["небольшой дождь", '🌦'],
                       "overcast-and-light-rain": ["небольшой дождь", '🌦'],
                       "partly-cloudy-and-rain": ["дождь", '🌧'],
                       "overcast-and-rain": ["сильный дождь", '⛆'],
                       "overcast-thunderstorms-with-rain": ["сильный дождь, гроза", '⛈'],
                       "cloudy-and-rain": ["дождь", '☔'],
                       "overcast-and-wet-snow": ["дождь со снегом", '🌨'],
                       "partly-cloudy-and-snow": ["снег", '❄'],
                       "cloudy-and-snow": ["снег", '❄'],
                       "partly-cloudy-and-light-snow": ["небольшой снег", '❅'],
                       "cloudy-and-light-snow": ["небольшой снег", '❅'],
                       "overcast-and-light-snow": ["небольшой снег", '❅'],
                       "overcast-and-snow": ["снегопад", '☃'],
                       }
        self.wind_d = {'nw': ["северо-западное", "↖"],
                       "n": ["северное", "⬆"],
                       "ne": ["северо-восточное", "↗"],
                       "e": ["восточное", "➡"],
                       "se": ["юго-восточное", "↘"],
                       "s": ["южное", "⬇"],
                       "sw": ["юго-западное", "↙"],
                       "w": ["западное", "⬅"],
                       "с": ["штиль", "⏹️"]}
        self.clock_d = {0: '🕛', 12: '🕛',
                       1: '🕐', 13: '🕐',
                       2: '🕑', 14: '🕑',
                       3: '🕒', 15: '🕒',
                       4: '🕓', 16: '🕑',
                       5: '🕔', 17: '🕔',
                       6: '🕔', 18: '🕔',
                       7: '🕖', 19: '🕖',
                       8: '🕗', 20: '🕑',
                       9: '🕘', 21: '🕘',
                       10: '🕙', 22: '🕙',
                       11: '🕚', 23: '🕚'
                  }
        self.time_d = {"tzinfo": '🕰',
                       "daytime": '',
                       "polar": '💫🌄',
                       "season": ''}
        self.daytime_d = {"day": '☀ ',
                          "night": '🌙'}
        self.season_d = {"summer": '🍃',
                         "autumn" : '🍂',
                         "spring": '🌾',
                         "winter": '❄'}
        self.sun_d = {"sunrise": '🌅',
                      "sunset": '🌇'}
        self.moon_d = {"new-moon": '🌑',
                       "last-quarter": '🌗',
                       "full-moon": '🌕',
                       "decreasing-moon": '🌖',
                       "first-quarter": '🌓',
                       "growing-moon": '🌔'
                       }



        self.time_d = {"date": '🗓',
                       "tzinfo": '🕰',
                       "daytime": '',
                       "polar": '💫',
                       "season": ''}
        self.daytime_d = {"day": '☀ ',
                          "night": '🌙'}
        self.season_d = {"summer": ['🍃', 'лето'],
                         "autumn" : ['🍂', 'осень'],
                         "spring": ['🌾', 'весна'],
                         "winter": ['❄', 'зима']}
        self.sun_d = {"sunrise": '🌅',
                      "sunset": '🌇'}
        self.moon_d = {"new-moon": ['🌑', 'новолуние'],
                       "last-quarter": ['🌗', 'последняя четверть'],
                       "full-moon": ['🌕', 'полнолуние'],
                       "decreasing-moon": ['🌖', 'убывающая Луна'],
                       "first-quarter": ['🌓', 'первая четверть'],
                       "growing-moon": ['🌔', 'растущая Луна']
                       }

        self.weather_request = 'https://api.weather.yandex.ru/v1/forecast/'

        headers = {'X-Yandex-API-Key': '6b963e22-5fa2-47e6-8a49-d67a12dd9793'}
        w_params = {'lat': self.lat,
                    'lon': self.lon,
                    'lang': "ru_RU"}

        self.response = requests.get(self.weather_request, headers=headers, params=w_params)

    def response_d(self, time):
        if self.response:
            json_response = self.response.json()
            if self.w:
                if self.time:
                    fact_w = json_response['fact']

                    text = f"Температура воздуха: {self.fact_d['temp'][0]} {fact_w['temp']}{self.fact_d['temp'][1]}\n" \
                        f"Скорость ветра:  {self.fact_d['wind_speed']} {fact_w['wind_speed']}м/с\n"\
                        f"Направление ветра:  {self.wind_d[fact_w['wind_dir']][1]} {self.wind_d[fact_w['wind_dir']][0]}\n"\
                        f"Атмосферное давление:  {self.fact_d['pressure_mm']} {fact_w['pressure_mm']}мм рт.ст.\n"\
                        f"Влажность воздуха:  {self.fact_d['humidity']} {fact_w['humidity']}%\n"\
                        f"Описание погоды:  {self.condition_d[fact_w['condition']][0]} {self.condition_d[fact_w['condition']][1]}\n"
                    return text
                else:
                    if time == '':
                        text = "Вы можете получить прогноз погоды на:\n"\
                               "Утро(1)\n"\
                               "День(2)\n"\
                               "Вечер(3)\n"\
                               "Ночь(4)\n"
                        return text
                    else:
                        if time == '1':
                            fact_w = json_response['forecasts'][0]['parts']['morning']
                            text_1 = f"Прогноз на утро:"
                        elif time == '2':
                            fact_w = json_response['forecasts'][0]['parts']['day']
                            text_1 = f"Прогноз на день:"
                        elif time == '3':
                            fact_w = json_response['forecasts'][0]['parts']['evening']
                            text_1 = f"Прогноз на вечер:"
                        elif time == '4':
                            fact_w = json_response['forecasts'][0]['parts']['night']
                            text_1 = f"Прогноз на ночь:"
                        text_2 = f"Температура воздуха: {self.fact_d['temp'][0]} {fact_w['temp_avg']}{self.fact_d['temp'][1]}\n" \
                            f"Скорость ветра:  {self.fact_d['wind_speed']} {fact_w['wind_speed']}м/с\n" \
                            f"Направление ветра:  {self.wind_d[fact_w['wind_dir']][1]} {self.wind_d[fact_w['wind_dir']][0]}\n" \
                             f"Атмосферное давление:  {self.fact_d['pressure_mm']} {fact_w['pressure_mm']}мм рт.ст.\n" \
                            f"Влажность воздуха:  {self.fact_d['humidity']} {fact_w['humidity']}%\n" \
                            f"Описание погоды:  {self.condition_d[fact_w['condition']][0]} {self.condition_d[fact_w['condition']][1]}\n"
                        return text_1, text_2
            else:
                fact_w = json_response
                text = f"Точное время:  {self.clock_d[datetime.datetime.now().hour]}{datetime.datetime.now()}\n"\
                       f"Часовой пояс:  {self.time_d['tzinfo']} {json_response['info']['tzinfo']['name']}\n"\
                       f"Явление полярной ночи в городе:\n"\
                       f"Временя года: \n"
                print(json_response['now_dt'])
                if json_response['fact']['polar']:
                    polar_txt = 'да'
                else:
                    polar_txt = 'нет'
                text = [f"Дата: {self.time_d['date']} {datetime.datetime.now().date()}\n",
                        # f"Точное время:  {self.clock_d[datetime.datetime.now().hour]}{datetime.datetime.now().time()}\n",
                        f"Часовой пояс:  {self.time_d['tzinfo']} {json_response['info']['tzinfo']['name']}\n",
                        f"Время рассвета: {self.sun_d['sunrise']} {json_response['forecasts'][0]['sunrise']}\n",
                        f"Время заката: {self.sun_d['sunset']} {json_response['forecasts'][0]['sunset']}\n",
                        f"Время года: {self.season_d[json_response['fact']['season']][0]} {self.season_d[json_response['fact']['season']][1]}\n",
                        f"Явление полярной ночи в городе: {self.time_d['polar']} {polar_txt}\n",
                        f"Фаза Луны: {self.moon_d[json_response['forecasts'][0]['moon_text']][0]} {self.moon_d[json_response['forecasts'][0]['moon_text']][1]}"]
                return ('').join(text)

        else:
            print("Ошибка выполнения запроса:")
            print(self.weather_request)
            print("Http статус:", self.response.status_code, "(", self.response.reason, ")")
            sys.exit(1)


class Cities:
    def __init__(self, city):
        print(city)
        self.city = city

        out = self.search(self.city)
        print("Cities.search ", out)

    def search(self, toponym):
        if toponym:

            geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

            geocoder_params = {
                "apikey": "40d1649f-0493-4b70-98ba-98533de7710b",
                "geocode": toponym,
                "format": "json"}

            response = requests.get(geocoder_api_server, params=geocoder_params)

            json_response = response.json()
            print(json_response['response']["GeoObjectCollection"]["metaDataProperty"]["GeocoderResponseMetaData"]['found'] == '0')
            if json_response['response']["GeoObjectCollection"]["metaDataProperty"]["GeocoderResponseMetaData"]['found'] != '0':
                kind_area = json_response["response"]["GeoObjectCollection"][
                    "featureMember"][0]["GeoObject"]["metaDataProperty"][
                    "GeocoderMetaData"]['Address']['Components'][-1]["kind"]

                if kind_area == 'province' or kind_area == 'locality':

                    toponym = json_response["response"]["GeoObjectCollection"][
                        "featureMember"][0]["GeoObject"]

                    city = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"][
                          "GeocoderMetaData"]['Address']['Components'][-1][
                          'name']

                    toponym_coodrinates = toponym["Point"]["pos"]
                    toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")

                    return toponym_longitude, toponym_lattitude, city
                else:
                    text = "Извините, я не знаю такого города. Может, Вы допустили ошибку?\n" \
                           "Попробуйте ввести название города еще раз"
                return text
            else:
                text = "Извините, я не знаю такого города. Может, Вы допустили ошибку?\n"\
                       "Попробуйте ввести название города еще раз"
                return text

        else:
            text = "Извините, я не знаю такого города. Может, Вы допустили ошибку?\n"\
                   "Попробуйте ввести название города еще раз"
            return text


def data(key):
    attachement = attachement_ph_d[random.choice(['True', 'False'])]
    if bool(attachement):
        return random.choice(attachement[key])
    return ''


if __name__ == '__main__':
    main()
